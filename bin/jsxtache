#!/usr/bin/env node
"use strict";

// General @TODO
// cache files that havent changed
// convert all sync functions to async
// jsxDir / jsDir to be passed to spawned jsx transform `jsx jsxDir jsDir -x jsx`

var args = require('minimist')(process.argv.slice(2));
var pkg = require('./../package.json');

var cwd = process.cwd();
var fs = require('fs');
var mkdirp = require('mkdirp');
var lodash = require('lodash');

var transform = require('./../src/jsxtache');
var chalk = require('chalk');

var JSXTACHE_EXTENSION = '.jsx.mustache';
var MUSTACHE_EXTENSION = '.mustache';
var JSX_EXTENSION = '.jsx';
var JS_EXTENSION = '.js';

/**
 *
 */
function logInfo() {
  console.log(chalk.yellow('Instructions:'));
  console.log(chalk.cyan('jsxtache <jsxtache dir> <options...>'));
  console.log(chalk.cyan('  --mustache (Default: null)'));
  console.log(chalk.cyan('  --jsx (Default: null)'));
  console.log(chalk.cyan('  --js (Default: null)'));
  console.log(chalk.cyan('jsxtache help'));
  console.log(chalk.cyan('jsxtache version'));
}

/**
 *
 */
function write(i, o) {
  mkdirp.sync(process.cwd() + '/' + o.replace(/\/[^\/]+$/, ''));
  fs.writeFileSync(o, i);
  console.log(chalk.green('create file:', o))
}

/**
 *
 */
function readdirSyncRecursive(dir) {
  var structure = [];

  /**
   *
   */
  function _readdirSyncRecursive(path) {
    var list = fs.readdirSync(path);
    list.forEach(function(item) {
      var fullPath = path + '/' + item;
      var isDirectory = fs.statSync(fullPath).isDirectory();
      if (!!isDirectory) {
        _readdirSyncRecursive(fullPath);
      } else {
        structure.push(fullPath);
      }
    });
  }

  var exists = fs.existsSync(dir);
  var stats = !!exists && fs.statSync(dir);
  var isDirectory = !!exists && !!stats.isDirectory();

  if (!!exists && !!isDirectory) {
    _readdirSyncRecursive(dir);
  } else {
    throw chalk.red(path + ' does not exist.');
  }

  return structure;
}

if (!args._[0] || args._[0] === 'help') {
  logInfo();
  return;
}

if (args._[0] === 'version') {
  console.log(chalk.cyan('jsxtache version: ' + pkg.version));
  return;
}

// raw
var dir = args._[0];
// compiled
var mustacheDir = args.mustache;
var jsxDir = args.jsx;
var jsDir = args.js;

if (!dir || !mustacheDir || !(!!jsxDir || !!jsDir)) {
  console.log(chalk.red('You must specify (1) a jsxtache directory, (2) a mustache directory, and (3) either a jsx or js directory.'));
  logInfo();
  return;
}

/**
 *
 */
function createFileGroups(files) {
  var groups = {};
  files.forEach(function(file) {
    var key = file.replace(dir, '').replace(/(^\/|\.jsx|\.mustache)/g, '');
    groups[key] = groups[key] || {};
    if (!!~file.indexOf('.jsx.mustache')) {
      groups[key].jsxtache = file;
    } else if (!!~file.indexOf('.mustache')) {
      groups[key].mustache = file;
    } else if (!!~file.indexOf('.jsx')) {
      groups[key].jsx = file;
    }
  });
  return groups;
}

/**
 *
 */
function compile(group, name) {
  if (!group.jsx) {
    throw chalk.red('A component must have a jsx file.')
  }

  var jsx = fs.readFileSync(group.jsx, 'utf-8'), jsxtache = null, mustache = null;
  if (!!group.jsxtache) {
    jsxtache = fs.readFileSync(group.jsxtache, 'utf-8');
  } else if (!!group.mustache) {
    mustache = fs.readFileSync(group.mustache, 'utf-8');
  }

  var compiled = transform(jsx, jsxtache, mustache);
  write(compiled.mustache, mustacheDir + '/' + name + MUSTACHE_EXTENSION);
  if (!!jsxDir) {
    write(compiled.jsx, jsxDir + '/' + name + JSX_EXTENSION);
  }
  if (!!jsDir) {
    write(compiled.js, jsDir + '/' + name + JS_EXTENSION);
  }
}

var files = readdirSyncRecursive(dir);
var groups = createFileGroups(files);
for (var prop in groups) {
  if (groups.hasOwnProperty(prop)) {
    compile(groups[prop], prop);
  }
}
